// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  username String    @unique
  name     String?
  password String
  image    Image[]
  comment  Comment[]
  token    Token[]
  like     Like[]

  @@map("users")
}

model Image {
  id        Int       @id @default(autoincrement())
  title     String
  content   String    @db.Text
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment   Comment[]
  Like      Like[]

  @@map("images")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageId Int
  image   Image @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId  Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageId   Int
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Token {
  id     Int    @id @default(autoincrement())
  token  String
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}
